{"version":3,"sources":["classes/Colors.js","requirement-icon/RequirementIcon.js","requirement-component/RequirementComponent.js","header/Header.js","vertex-conponent/VertexComponent.js","classes/Vertex.js","edge-component/EdgeComponent.js","classes/Edge.js","field/Field.js","classes/Requirement.js","modules/IntersectionUtils.js","app/App.js","serviceWorker.js","index.js"],"names":["colors","RequirementIcon","requirementType","params","color1","color2","react_default","a","createElement","react","x1","y1","x2","y2","style","strokeWidth","stroke","this","getSvgContent","props","Component","RequirementComponent","requirement","className","src_requirement_icon_RequirementIcon","type","currentCount","count","Header","requirementElements","keyCounter","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","requirements","Symbol","iterator","next","done","value","push","src_requirement_component_RequirementComponent","key","err","return","id","getRequirementElements","VertexComponent","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","hover","vertex","vertexSize","color","ringRadius","ringWidth","selected","cx","x","cy","y","r","fill","setState","_this2","getRing","fillOpacity","onClick","vertexClicked","onMouseEnter","setHover","onMouseLeave","Vertex","edge","EdgeComponent","vertex1","vertex2","Edge","Field","ref","React","createRef","sizeParams","window","addEventListener","setSizeParams","Math","min","current","clientWidth","clientHeight","_this3","edgeElements","vertexElements","edges","normalizedEdge","src_edge_component_EdgeComponent","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","newVertex","src_vertex_conponent_VertexComponent","_iterator2","vertices","Requirement","LineParams","b","Position","getLineParams","isBetween","bound1","bound2","minBound","maxBound","max","getYAsFunctionOfX","lineParams","edgesIntersect","edge1","edge2","intersectionPosition","lineParams1","lineParams2","parallelEdge","nonParallelLineParams","intersectionX","intersectionY","getIntersectionPosition","App","selectedVertexId","level","require","currentId","vertexId","slice","clickedVertex","filter","currentEdge","selectedVertex","existingEdge","edgeId","length","getUpdatedRequirements","numOfColors","colorPairIdToIntersections","i","j","colorPairId","getColorPairId","hasOwnProperty","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","src_header_Header","src_field_Field","Boolean","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97c3c3f1.chunk.js","sourcesContent":["let colors = [\r\n    '#ff5757',\r\n    '#57a1ff',\r\n    '#fcd21d',\r\n    // '#1eb655'\r\n];\r\n\r\nexport default colors;","import React, {Component, Fragment} from 'react';\nimport './RequirementIcon.css';\nimport colors from '../classes/Colors'\n\nclass RequirementIcon extends Component {\n\n    getSvgContent(requirementType, params) {\n        if (requirementType === 'Intersection') {\n            let color1 = params['color1'];\n            let color2 = params['color2'];\n            return (\n                <Fragment>\n                    <line x1={0} y1={0} x2={16} y2={16} style={{strokeWidth: 3, stroke: colors[color1]}} />\n                    <line x1={16} y1={0} x2={0} y2={16} style={{strokeWidth: 3, stroke: colors[color2]}} />\n                </Fragment>\n            );\n        }\n        return null;\n    }\n\n  render() {\n    return (\n        <svg>\n            { this.getSvgContent(this.props.requirementType, this.props.params) }\n        </svg>\n    );\n  }\n}\n\nexport default RequirementIcon;\n","import React, {Component} from 'react';\nimport './RequirementComponent.css';\nimport RequirementIcon from '../requirement-icon/RequirementIcon'\n\nclass RequirementComponent extends Component {\n\n  render() {\n      let requirement = this.props.requirement;\n    return (\n        <div className={'requirement-wrapper'}>\n            <RequirementIcon requirementType={requirement.type} params={requirement.params} />\n            <div className={\n                'requirement-status ' +\n                (requirement.currentCount === requirement.count ? 'requirement-status-completed ' : '') +\n                (requirement.currentCount > requirement.count ? 'requirement-status-overdone ' : '')\n            }>{requirement.currentCount} / {requirement.count}</div>\n        </div>\n    );\n  }\n}\n\nexport default RequirementComponent;\n","import React, {Component} from 'react';\nimport './Header.css';\nimport RequirementComponent from '../requirement-component/RequirementComponent'\n\nclass Header extends Component {\n\n    getRequirementElements() {\n        let requirementElements = [];\n        let keyCounter = 0;\n        for (let requirement of this.props.requirements) {\n            requirementElements.push(\n                <RequirementComponent requirement={requirement} key={'requirement' + keyCounter} />\n            );\n            keyCounter++;\n        }\n        return requirementElements;\n    }\n\n  render() {\n    return (\n        <div id={'header-wrapper'}>\n            { this.getRequirementElements() }\n        </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, {Component, Fragment} from 'react';\nimport './VertexComponent.css';\nimport colors from '../classes/Colors'\n\nclass VertexComponent extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            hover: false\n        }\n    }\n\n    getRing(vertex, vertexSize, color) {\n        let ringRadius = vertexSize * 2;\n        let ringWidth = ringRadius * 0.15;\n        if (vertex.selected || this.state.hover) {\n            return (\n                <circle cx={vertex.x} cy={vertex.y} r={ringRadius} stroke={color} strokeWidth={ringWidth} fill=\"none\" key={'ring'} />\n            );\n        }\n    }\n\n    setHover(value) {\n        this.setState({\n            hover: value\n        });\n    }\n\n  render() {\n        let vertex = this.props.vertex;\n      let vertexSize = this.props.vertexSize;\n      let color = colors[vertex.color];\n    return (\n        <Fragment key={'fragment'}>\n            { this.getRing(vertex, vertexSize, color) }\n            <circle cx={vertex.x}\n                    cy={vertex.y}\n                    r={vertexSize}\n                    fill={color} />\n            <circle className={'vertex-circle'}\n                    cx={vertex.x}\n                    cy={vertex.y}\n                    r={vertexSize * 2}\n                    fillOpacity={0}\n                    onClick={() => this.props.vertexClicked()} key={'circle'}\n                    onMouseEnter={() => this.setHover(true)}\n                    onMouseLeave={() => this.setHover(false)} />\n        </Fragment>\n    );\n  }\n}\n\nexport default VertexComponent;\n","class Vertex {\r\n\r\n    id;\r\n    color;\r\n    x;\r\n    y;\r\n    selected;\r\n    edge;\r\n\r\n    constructor(id, color, x, y) {\r\n        this.id = id;\r\n        this.color = color;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.selected = false;\r\n        this.edge = null;\r\n    }\r\n}\r\n\r\nexport default Vertex","import React, {Component} from 'react';\nimport './EdgeComponent.css';\nimport colors from '../classes/Colors'\n\nclass EdgeComponent extends Component {\n\n  render() {\n        let edge = this.props.edge;\n    return (\n        <line\n            x1={edge.vertex1.x}\n            y1={edge.vertex1.y}\n            x2={edge.vertex2.x}\n            y2={edge.vertex2.y}\n            style={{strokeWidth: 2, stroke: colors[edge.color]}} />\n    );\n  }\n}\n\nexport default EdgeComponent;\n","class Edge {\r\n\r\n    id;\r\n    vertex1;\r\n    vertex2;\r\n    color;\r\n\r\n    constructor(id, vertex1, vertex2, color) {\r\n        this.id = id;\r\n        this.vertex1 = vertex1;\r\n        this.vertex2 = vertex2;\r\n        this.color = color;\r\n    }\r\n}\r\n\r\nexport default Edge;","import React, {Component} from 'react';\nimport './Field.css';\nimport VertexComponent from \"../vertex-conponent/VertexComponent\"\nimport Vertex from '../classes/Vertex'\nimport EdgeComponent from '../edge-component/EdgeComponent'\nimport Edge from '../classes/Edge'\n\nclass Field extends Component {\n\n    constructor() {\n        super();\n        this.ref = React.createRef();\n        this.state = {\n            sizeParams: {}\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', () => this.setSizeParams());\n        this.setSizeParams();\n    }\n\n    setSizeParams() {\n        let vertexSize = Math.min(this.ref.current.clientWidth, this.ref.current.clientHeight) / 100;\n        this.setState({\n            sizeParams: {\n                'vertexSize': vertexSize,\n                'clientWidth': this.ref.current.clientWidth,\n                'clientHeight': this.ref.current.clientHeight\n            }\n        });\n    }\n\n\n  render() {\n      let edgeElements = [];\n      let vertexElements = [];\n      let vertexSize = this.state.sizeParams['vertexSize'];\n      let clientWidth = this.state.sizeParams['clientWidth'];\n      let clientHeight = this.state.sizeParams['clientHeight'];\n      let fieldMargin = 0.08;\n      let fieldPercentage = 1 - (2 * fieldMargin);\n      if (clientWidth != null) {\n          for (let edge of this.props.edges) {\n              let x1 = edge.vertex1.x * clientWidth * fieldPercentage + (clientWidth * fieldMargin);\n              let y1 = edge.vertex1.y * clientHeight * fieldPercentage + (clientHeight * fieldMargin);\n              let x2 = edge.vertex2.x * clientWidth * fieldPercentage + (clientWidth * fieldMargin);\n              let y2 = edge.vertex2.y * clientHeight * fieldPercentage + (clientHeight * fieldMargin);\n              let vertex1 = new Vertex(edge.vertex1.id, edge.vertex1.color, x1, y1);\n              let vertex2 = new Vertex(edge.vertex2.id, edge.vertex2.color, x2, y2);\n              let normalizedEdge = new Edge(edge.id, vertex1, vertex2, edge.color);\n              edgeElements.push(\n                  <EdgeComponent edge={normalizedEdge} key={'edge' + edge.id}/>\n              );\n          }\n          for (let vertex of this.props.vertices) {\n              let x = vertex.x * clientWidth * fieldPercentage + (clientWidth * fieldMargin);\n              let y = vertex.y * clientHeight * fieldPercentage + (clientHeight * fieldMargin);\n              let newVertex = new Vertex(vertex.id, vertex.color, x, y);\n              newVertex.selected = vertex.selected;\n              vertexElements.push(\n                  <VertexComponent\n                      vertex={newVertex}\n                      vertexSize={vertexSize}\n                      vertexClicked={() => this.props.vertexClicked(vertex.id)}\n                      key={'vertex' + vertex.id}/>\n              );\n          }\n      }\n    return (\n        <svg ref={this.ref} id={'field'}>\n            { edgeElements }\n            { vertexElements }\n        </svg>\n    );\n  }\n}\n\nexport default Field;\n","class Requirement {\r\n\r\n    type;\r\n    count;\r\n    currentCount;\r\n    params;\r\n\r\n    constructor(type, count, params) {\r\n        this.type = type;\r\n        this.count = count;\r\n        this.currentCount = 0;\r\n        this.params = params;\r\n    }\r\n}\r\n\r\nexport default Requirement","class LineParams {\r\n\r\n    a;\r\n    b;\r\n\r\n    constructor(a, b) {\r\n        this.a = a;\r\n        this.b = b;\r\n    }\r\n}\r\n\r\nclass Position {\r\n\r\n    x;\r\n    y;\r\n\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n}\r\n\r\nfunction edgesIntersect(edge1, edge2) {\r\n    let intersectionPosition = getIntersectionPosition(edge1, edge2);\r\n    if (intersectionPosition == null) {\r\n        return false;\r\n    }\r\n\r\n    return isBetween(intersectionPosition.x, edge1.vertex1.x, edge1.vertex2.x) &&\r\n        isBetween(intersectionPosition.x, edge2.vertex1.x, edge2.vertex2.x) &&\r\n        isBetween(intersectionPosition.y, edge1.vertex1.y, edge1.vertex2.y) &&\r\n        isBetween(intersectionPosition.y, edge2.vertex1.y, edge2.vertex2.y);\r\n\r\n}\r\n\r\nfunction getIntersectionPosition(edge1, edge2) {\r\n    let lineParams1 = getLineParams(edge1);\r\n    let lineParams2 = getLineParams(edge2);\r\n    if (lineParams1 == null && lineParams2 == null) {\r\n        // Both lines are parallel to Y axis\r\n        return null;\r\n    }\r\n    if (lineParams1 == null || lineParams2 == null) {\r\n        // One of the lines is parallel to Y axis\r\n        let parallelEdge;\r\n        let nonParallelLineParams;\r\n        if (lineParams1 == null) {\r\n            parallelEdge = edge1;\r\n            nonParallelLineParams = lineParams2;\r\n        } else { // lineParams2 == null\r\n            parallelEdge = edge2;\r\n            nonParallelLineParams = lineParams1;\r\n        }\r\n\r\n        let intersectionX = parallelEdge.vertex1.x;\r\n        let intersectionY = getYAsFunctionOfX(intersectionX, nonParallelLineParams);\r\n        return new Position(intersectionX, intersectionY);\r\n    }\r\n    if (lineParams1.a === lineParams2.a) {\r\n        // Lines are parallel to each other\r\n        return null;\r\n    }\r\n\r\n    let intersectionX = (lineParams2.b - lineParams1.b) / (lineParams1.a - lineParams2.a);\r\n    let intersectionY = getYAsFunctionOfX(intersectionX, lineParams1);\r\n    return new Position(intersectionX, intersectionY);\r\n}\r\n\r\nfunction getLineParams(edge) {\r\n    let vertex1 = edge.vertex1;\r\n    let vertex2 = edge.vertex2;\r\n    if (vertex1.x === vertex2.x) {\r\n        // Line is parallel to Y axis\r\n        return null;\r\n    }\r\n    let a = (vertex2.y - vertex1.y) / (vertex2.x - vertex1.x);\r\n    let b = vertex1.y - (vertex1.x * a);\r\n    return new LineParams(a, b);\r\n}\r\n\r\nfunction isBetween(value, bound1, bound2) {\r\n    let minBound = Math.min(bound1, bound2);\r\n    let maxBound = Math.max(bound1, bound2);\r\n    return value >= minBound && value <= maxBound;\r\n}\r\n\r\nfunction getYAsFunctionOfX(x, lineParams) {\r\n    return (lineParams.a * x) + lineParams.b;\r\n}\r\n\r\nexport default edgesIntersect;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../header/Header';\nimport Field from '../field/Field';\nimport Vertex from '../classes/Vertex';\nimport Edge from '../classes/Edge';\nimport Requirement from '../classes/Requirement';\nimport edgesIntersect from '../modules/IntersectionUtils';\nimport colors from '../classes/Colors'\n\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            vertices: [],\n            edges: [],\n            requirements: [],\n            selectedVertexId: null\n        };\n    }\n\n    componentDidMount() {\n        let levels = require('..\\\\assets\\\\levels.json');\n        let level = levels[\"levels\"][0];\n\n        let vertices = [];\n        let currentId = 0;\n        for (let vertex of level[\"vertices\"]) {\n            vertices.push(new Vertex(currentId, vertex[\"color\"], vertex[\"x\"], vertex[\"y\"]));\n            currentId++;\n        }\n\n        let requirements = [];\n        for (let requirement of level[\"requirements\"]) {\n            requirements.push(new Requirement(requirement[\"type\"], requirement[\"count\"], requirement[\"params\"]));\n        }\n\n\n        this.setState({\n            vertices: vertices,\n            requirements: requirements\n        });\n    }\n\n    vertexClicked(vertexId) {\n        let vertices = this.state.vertices.slice();\n        let edges = this.state.edges.slice();\n        let selectedVertexId = this.state.selectedVertexId;\n        let clickedVertex = vertices[vertexId];\n\n        if (selectedVertexId == null) {\n            if (clickedVertex.edge == null) {\n                selectedVertexId = vertexId;\n                clickedVertex.selected = true;\n            } else {\n                let edge = clickedVertex.edge;\n                edge.vertex1.edge = null;\n                edge.vertex2.edge = null;\n                edges = edges.filter(currentEdge => currentEdge !== edge);\n            }\n        } else {\n            if (vertexId !== selectedVertexId) {\n                let selectedVertex = vertices[selectedVertexId];\n                let clickedVertex = vertices[vertexId];\n\n                if (selectedVertex.color === clickedVertex.color) {\n                    if (clickedVertex.edge != null) {\n                        let existingEdge = clickedVertex.edge;\n                        existingEdge.vertex1.edge = null;\n                        existingEdge.vertex2.edge = null;\n                        edges = edges.filter(currentEdge => currentEdge !== existingEdge);\n                    }\n                    let edgeId = selectedVertex.id * vertices.length + clickedVertex.id;\n                    let edge = new Edge(edgeId, selectedVertex, clickedVertex, selectedVertex.color);\n                    edges.push(edge);\n                    selectedVertex.edge = edge;\n                    clickedVertex.edge = edge;\n                }\n            }\n\n            vertices[selectedVertexId].selected = false;\n            selectedVertexId = null;\n        }\n\n        let requirements = this.getUpdatedRequirements(edges);\n        this.setState({\n            vertices: vertices,\n            edges: edges,\n            requirements: requirements,\n            selectedVertexId: selectedVertexId\n        });\n\n    }\n\n    getUpdatedRequirements(edges) {\n        let numOfColors = colors.length;\n        let colorPairIdToIntersections = {};\n        for (let i = 0; i < edges.length; i++) {\n            for (let j = 0; j < i; j++) {\n                let edge1 = edges[i];\n                let edge2 = edges[j];\n                if (edgesIntersect(edge1, edge2)) {\n                    let colorPairId = this.getColorPairId(edge1.color, edge2.color, numOfColors);\n                    if (!colorPairIdToIntersections.hasOwnProperty(colorPairId)) {\n                        colorPairIdToIntersections[colorPairId] = 0;\n                    }\n                    colorPairIdToIntersections[colorPairId] += 1;\n                }\n\n            }\n        }\n\n        let requirements = this.state.requirements.slice();\n        for (let requirement of requirements) {\n            let color1 = requirement.params[\"color1\"];\n            let color2 = requirement.params[\"color2\"];\n            let colorPairId = this.getColorPairId(color1, color2, numOfColors);\n            requirement.currentCount = 0;\n            if (colorPairIdToIntersections.hasOwnProperty(colorPairId)) {\n                requirement.currentCount = colorPairIdToIntersections[colorPairId];\n            }\n        }\n        return requirements;\n    }\n\n    getColorPairId(color1, color2, numOfColors) {\n        let minColor = Math.min(color1, color2);\n        let maxColor = Math.max(color1, color2);\n        return (minColor * numOfColors) + maxColor;\n    }\n\n  render() {\n    return (\n        <div id={'wrapper'}>\n            <div id={'header'}>\n                <Header requirements={this.state.requirements}/>\n            </div>\n            <div id={'field'}>\n                <Field\n                    vertices={this.state.vertices}\n                    edges={this.state.edges}\n                    vertexClicked={(vertexId) => this.vertexClicked(vertexId)}/>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}